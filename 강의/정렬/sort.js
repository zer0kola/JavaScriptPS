// sort
// 시간복잡도: O(nlogn)

// 선택 정렬(최소값을 선택해서 앞으로 보내는 정렬) - 시간복잡도: O(n^2)
// 삽입 정렬(특정한 데이터를 적절한 위치에 삽입하는 정렬) - 시간복잡도: O(n^2)
// 버블 정렬(두 인접한 데이터를 비교해서 앞에 있는 데이터가 뒤에 있는 데이터보다 크면 자리를 바꾸는 정렬) - 시간복잡도: O(n^2)
// 병합 정렬(분할 정복 알고리즘을 이용하는 정렬) - 시간복잡도: O(nlogn)

// javascrpit sort() 메서드
// 시간복잡도: O(nlogn)

// 간단한 로직은 메서드 안에 넣어서 사용 가능하고,
// 복잡한 로직은 sort() 메서드 밖에 빼서 사용 가능

// 아무 함수도 넣지 않으면 기본적으로 문자열 기준 오름차순 정렬
// 대소문자 구분 없이 정렬하고 싶다면 sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))

// 따라서 숫자를 정렬할 때는 sort((a, b) => a - b)를 사용해야 숫자 크기대로 정렬 가능
// 반환값이 음수면 오름차순 정렬: sort((a, b) => a - b)
// 반환값이 양수면 내림차순 정렬: sort((a, b) => b - a)

// 코딩테스트에서의 정렬은
// 1. 기본 정렬 라이브러리를 그대로 사용하는 문제
// 2. 정렬 알고리즘의 원리에 대해서 물어보는 문제
// 3. 더 빠른 정렬이 필요한 문제 (병합 정렬, 퀵 정렬 등)
